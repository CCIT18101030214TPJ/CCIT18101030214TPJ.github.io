{"meta":{"title":"转生 | 你在吗(⌒▽⌒)","subtitle":"记录生活的点点滴滴","description":"我是一个爱笑的人，但不是一个开心的人","author":"hyp","url":"http://www.tpjun.top"},"pages":[{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-22T10:53:12.244Z","comments":true,"path":"comment/index.html","permalink":"http://www.tpjun.top/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"client/index.html","permalink":"http://www.tpjun.top/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-03-25T03:05:37.353Z","comments":false,"path":"donate/index.html","permalink":"http://www.tpjun.top/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"lab/index.html","permalink":"http://www.tpjun.top/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-03-25T06:08:30.413Z","comments":false,"path":"about/index.html","permalink":"http://www.tpjun.top/about/index.html","excerpt":"","text":"[いますかhyp] 与&nbsp; hyp&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-03-21T16:09:09.056Z","comments":false,"path":"bangumi/index.html","permalink":"http://www.tpjun.top/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-04-23T07:40:54.376Z","comments":false,"path":"music/index.html","permalink":"http://www.tpjun.top/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-02-14T09:11:23.000Z","comments":true,"path":"rss/index.html","permalink":"http://www.tpjun.top/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-02-14T09:11:23.000Z","comments":true,"path":"tags/index.html","permalink":"http://www.tpjun.top/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"http://www.tpjun.top/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-02-14T09:11:23.000Z","comments":false,"path":"video/index.html","permalink":"http://www.tpjun.top/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"links","date":"2020-03-22T04:00:00.000Z","updated":"2020-03-22T10:42:55.111Z","comments":true,"path":"links/index.html","permalink":"http://www.tpjun.top/links/index.html","excerpt":"","text":"","keywords":"友人帐"}],"posts":[{"title":"控制BBC Microbit 每个LED灯（六）","slug":"控制BBC Microbit LED灯（六）","date":"2020-06-23T15:14:00.000Z","updated":"2020-06-23T15:52:40.777Z","comments":true,"path":"2020/06/23/控制BBC Microbit LED灯（六）/","link":"","permalink":"http://www.tpjun.top/2020/06/23/控制BBC Microbit LED灯（六）/","excerpt":"","text":"在系列（五）的基础上进行优化，将控制LED灯的行列变为每个小灯 Step1：添加代码1.首先添加25个按钮，进而控制小灯的亮灭 &lt;h5&gt;Control Every-LED&lt;/h5&gt; &lt;button id=&quot;btn_writeE0&quot; onclick=&quot;E(0)&quot;&gt;Control LED1&lt;/button&gt; &lt;button id=&quot;btn_writeE1&quot; onclick=&quot;E(1)&quot;&gt;Control LED2&lt;/button&gt; &lt;button id=&quot;btn_writeE2&quot; onclick=&quot;E(2)&quot;&gt;Control LED3&lt;/button&gt; &lt;button id=&quot;btn_writeE3&quot; onclick=&quot;E(3)&quot;&gt;Control LED4&lt;/button&gt; &lt;button id=&quot;btn_writeE4&quot; onclick=&quot;E(4)&quot;&gt;Control LED5&lt;/button&gt; &lt;br&gt; &lt;button id=&quot;btn_writeE5&quot; onclick=&quot;E(5)&quot;&gt;Control LED6&lt;/button&gt; &lt;button id=&quot;btn_writeE6&quot; onclick=&quot;E(6)&quot;&gt;Control LED7&lt;/button&gt; &lt;button id=&quot;btn_writeE7&quot; onclick=&quot;E(7)&quot;&gt;Control LED8&lt;/button&gt; &lt;button id=&quot;btn_writeE8&quot; onclick=&quot;E(8)&quot;&gt;Control LED9&lt;/button&gt; &lt;button id=&quot;btn_writeE9&quot; onclick=&quot;E(9)&quot;&gt;Control LED10&lt;/button&gt; &lt;br&gt; &lt;button id=&quot;btn_writeE10&quot; onclick=&quot;E(10)&quot;&gt;Control LED11&lt;/button&gt; &lt;button id=&quot;btn_writeE11&quot; onclick=&quot;E(11)&quot;&gt;Control LED12&lt;/button&gt; &lt;button id=&quot;btn_writeE12&quot; onclick=&quot;E(12)&quot;&gt;Control LED13&lt;/button&gt; &lt;button id=&quot;btn_writeE13&quot; onclick=&quot;E(13)&quot;&gt;Control LED14&lt;/button&gt; &lt;button id=&quot;btn_writeE14&quot; onclick=&quot;E(14)&quot;&gt;Control LED15&lt;/button&gt; &lt;br&gt; &lt;button id=&quot;btn_writeE15&quot; onclick=&quot;E(15)&quot;&gt;Control LED16&lt;/button&gt; &lt;button id=&quot;btn_writeE16&quot; onclick=&quot;E(16)&quot;&gt;Control LED17&lt;/button&gt; &lt;button id=&quot;btn_writeE17&quot; onclick=&quot;E(17)&quot;&gt;Control LED18&lt;/button&gt; &lt;button id=&quot;btn_writeE18&quot; onclick=&quot;E(18)&quot;&gt;Control LED19&lt;/button&gt; &lt;button id=&quot;btn_writeE19&quot; onclick=&quot;E(19)&quot;&gt;Control LED20&lt;/button&gt; &lt;br&gt; &lt;button id=&quot;btn_writeE20&quot; onclick=&quot;E(20)&quot;&gt;Control LED21&lt;/button&gt; &lt;button id=&quot;btn_writeE21&quot; onclick=&quot;E(21)&quot;&gt;Control LED22&lt;/button&gt; &lt;button id=&quot;btn_writeE22&quot; onclick=&quot;E(22)&quot;&gt;Control LED23&lt;/button&gt; &lt;button id=&quot;btn_writeE23&quot; onclick=&quot;E(23)&quot;&gt;Control LED24&lt;/button&gt; &lt;button id=&quot;btn_writeE24&quot; onclick=&quot;E(24)&quot;&gt;Control LED25&lt;/button&gt; 2.每个按钮按下都会调用函数E（）然后将每个小灯位置值赋给i，j最后调用函数Eve（）完成控制。 var led_Eve=[0,0,0,0,0] function Eve(){ if(led_Eve[i]==0) { led_array[i]=led_array[i]|(1&lt;&lt;j); led_Eve[i]=1; } else{ led_array[i]=led_array[i]&amp;(~(1&lt;&lt;j)); led_Eve[i]=0; } randomLEDs(); } function E(A){ if(A==0){i=0;j=0;Eve();} else if(A==1){i=1;j=0;Eve();} else if(A==2){i=2;j=0;Eve();} else if(A==3){i=3;j=0;Eve();} else if(A==4){i=4;j=0;Eve();} else if(A==5){i=0;j=1;Eve();} else if(A==6){i=1;j=1;Eve();} else if(A==7){i=2;j=1;Eve();} else if(A==8){i=3;j=1;Eve();} else if(A==9){i=4;j=1;Eve();} else if(A==10){i=0;j=2;Eve();} else if(A==11){i=1;j=2;Eve();} else if(A==12){i=2;j=2;Eve();} else if(A==13){i=3;j=2;Eve();} else if(A==14){i=4;j=2;Eve();} else if(A==15){i=0;j=3;Eve();} else if(A==16){i=1;j=3;Eve();} else if(A==17){i=2;j=3;Eve();} else if(A==18){i=3;j=3;Eve();} else if(A==19){i=4;j=3;Eve();} else if(A==20){i=0;j=4;Eve();} else if(A==21){i=1;j=4;Eve();} else if(A==22){i=2;j=4;Eve();} else if(A==23){i=3;j=4;Eve();} else if(A==24){i=4;j=4;Eve();} } Step2：实验现象","categories":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}]},{"title":"控制BBC Microbit LED灯的行列（五）","slug":"控制BBC Microbit LED灯（五）","date":"2020-06-23T04:07:00.000Z","updated":"2020-06-23T15:47:29.136Z","comments":true,"path":"2020/06/23/控制BBC Microbit LED灯（五）/","link":"","permalink":"http://www.tpjun.top/2020/06/23/控制BBC Microbit LED灯（五）/","excerpt":"","text":"通过Web Bluetooth控制Microbit LED小灯的行列 Step1：修改代码1.接着要修改HTML代码，在web添加按钮，总共有10个按钮： &lt;h3&gt;Write Characteristic - Ran Lights&lt;/h3&gt; &lt;h4&gt;Control-Row&lt;/h4&gt; &lt;button id=&quot;btn_writeR0&quot; onclick=&quot;F(0)&quot;&gt;ControlRow0 LED&lt;/button&gt; &lt;button id=&quot;btn_writeR1&quot; onclick=&quot;F(1)&quot;&gt;ControlRow1 LED&lt;/button&gt; &lt;button id=&quot;btn_writeR2&quot; onclick=&quot;F(2)&quot;&gt;ControlRow2 LED&lt;/button&gt; &lt;button id=&quot;btn_writeR3&quot; onclick=&quot;F(3)&quot;&gt;ControlRow3 LED&lt;/button&gt; &lt;button id=&quot;btn_writeR4&quot; onclick=&quot;F(4)&quot;&gt;ControlRow4 LED&lt;/button&gt; &lt;h4&gt;Control-Col&lt;/h4&gt; &lt;button id=&quot;btn_writeC0&quot; onclick=&quot;G(0)&quot;&gt;ControlCol0 LED&lt;/button&gt; &lt;button id=&quot;btn_writeC1&quot; onclick=&quot;G(1)&quot;&gt;ControlCol1 LED&lt;/button&gt; &lt;button id=&quot;btn_writeC2&quot; onclick=&quot;G(2)&quot;&gt;ControlCol2 LED&lt;/button&gt; &lt;button id=&quot;btn_writeC3&quot; onclick=&quot;G(3)&quot;&gt;ControlCol3 LED&lt;/button&gt; &lt;button id=&quot;btn_writeC4&quot; onclick=&quot;G(4)&quot;&gt;ControlCol4 LED&lt;/button&gt; 2.添加数组和变量 var led_array=[0,0,0,0,0]; var led_Row=[0,0,0,0,0]; var led_Col=[0,0,0,0,0]; var i; var j; 3.在这一过程中,大家只用添加4个函数，Row（）和Col（）函数分别是控制行列，而F（C），G（L）函数是将上面两个函数进行调用，当网页按钮按下时，调用F(C)，G(L)函数，这里的C和L是由于网页按下按钮的不同被赋于了不同的值，从而将值赋给函数进行if判断，数组led_Row和led_Col是指在进行行或列控制时，如果有相应的行按钮或列按钮按下则被赋于1小灯亮，若没有行按钮按下则是0灭，进而控制LED灯行列的亮灭。 function Row(){ if(led_Row[i]==0){ led_array[i]=31; led_Row[i]=1; } else{ led_array[i]=0; led_Row[i]=0; } randomLEDs(); } function Col(){ if(led_Col[j]==0) { for(i=0;i&lt;5;i++) led_array[i]=led_array[i]|(1&lt;&lt;j); led_Col[j]=1; } else{ for(i=0;i&lt;5;i++) led_array[i]=led_array[i]&amp;(~(1&lt;&lt;j)); led_Col[j]=0; } randomLEDs(); } function F(C){ if(C==0){i=0;Row();} else if(C==1){i=1;Row();} else if(C==2){i=2;Row();} else if(C==3){i=3;Row();} else if(C==4){i=4;Row();} } function G(L){ if(L==0){j=0;Col();} else if(L==1){j=1;Col();} else if(L==2){j=2;Col();} else if(L==3){j=3;Col();} else if(L==4){j=4;Col();} } Step2：实验现象1.网页浏览器端的现象： 2.开发板连接成功现象： 3.按下网页端ControlRow02 LEDs和ControlCol2 LEDs按钮，开发会在每行每列发生变化。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"MicroBit蓝牙启用通知（四）","slug":"MicroBit启用通知和指示（四）","date":"2020-06-21T15:07:00.000Z","updated":"2020-06-23T16:08:25.199Z","comments":true,"path":"2020/06/21/MicroBit启用通知和指示（四）/","link":"","permalink":"http://www.tpjun.top/2020/06/21/MicroBit启用通知和指示（四）/","excerpt":"","text":"在本系列的前几部分中，我了解了如何使用Web蓝牙API来发现蓝牙低能耗(LE)设备、形成连接、发现和缓存GATT服务和特征以及读写特征值在。最后一部分中，我们将学习如何使用通知。 一，要添加的代码内容和相关的解析step1:用户界面状态1.首先添加一个变量，我们可以用来跟踪通知订阅的状态: var notifications_enabled = false; 2.添加函数setNotificationsStatus(status)，将通知订阅的状态传进来，将该状态赋给notifications_enabled。 function setNotificationsStatus(status) { notifications_enabled = status; document.getElementById(&#39;status_notifications&#39;).innerHTML = status; } 3.有这个setNotificationsStatus(status)函数，我们要进行调用，将其放入resetUI()函数中调用。 function resetUI() { setConnectedStatus(false); setDiscoveryStatus(false); ``setNotificationsStatus(false); ``//要添加的代码就这一句 } Step2:验证状态订阅和接收通知只能在我们与设备连接时执行。我们还需要检查连接的设备是否包含所要求的相关的服务和特征，然后我们才试图启用有关该特征的通知。因此，我们将在订阅加速计数据通知的代码中包含一些验证，就像我们在上一部分中读取和写入特征时所做的那样。添加的函数是toggleAccelerometerNotifications() 内容如下： function toggleAccelerometerNotifications() { console.log(&quot;toggleAccelerometerNotifications&quot;); if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_accelerometer_service) { alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; } if (!has_accelerometer_data) { alert(&quot;Error: The connected device does not contain the accelerometer data characteristic&quot;); return; } Step3:启用和禁用通知通知也是有启用和禁用的，我们要么开始通知，要么取消订阅并停止它们，这取决于当前的订阅状态。所以我们要有以下判断： //接着上面添加 if (!notifications_enabled) { accelerometer_data.startNotifications() .then(_ =&gt; { console.log(&#39;accelerometer notifications started&#39;); setNotificationsStatus(true); }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } else { accelerometer_data.stopNotifications() .then(_ =&gt; { console.log(&#39;accelerometer notifications stopped&#39;); setNotificationsStatus(false); }) .catch(error =&gt; { console.log(&#39;Could not stop accelerometer_data notifications: &#39; + error); }); } } Step4:通知事件我们仍然需要一些代码来处理收到的通知。我们还需要在停止通知时做一些整理,所以在toggleAccelerometerNotifications()函数需要添加以下代码： accelerometer_data.addEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); accelerometer_data.removeEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); 在toggleAccelerometerNotifications()函数中的位置如下： if (!notifications_enabled) { accelerometer_data.startNotifications() .then(_ =&gt; { console.log(&#39;accelerometer notifications started&#39;); setNotificationsStatus(true); “accelerometer_data.addEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); ”//只用添加这句代码 }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } else { accelerometer_data.stopNotifications() .then(_ =&gt; { console.log(&#39;accelerometer notifications stopped&#39;); setNotificationsStatus(false); “accelerometer_data.removeEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); ”//只用添加这句代码 }) .catch(error =&gt; { console.log(&#39;Could not stop accelerometer_data notifications: &#39; + error); }); } } 当接收到某个特征的通知时，将触发一个事件并附加该特征值。在更改中，我们所做的是注册一个函数来处理此事件。 Step5：处理通知我们的最后一个任务是添加onAccelerometerData函数，它将在每次收到通知时被调用。事件处理程序接收一个事件对象，将附加到事件对象目标值的ArrayBuffer中。 function onAccelerometerData(event) { console.log(&quot;onAccelerometerData&quot;); buffer = event.target.value.buffer; dataview = new DataView(buffer); X = dataview.getUint16(0, true); Y = dataview.getUint16(2, true); Z = dataview.getUint16(4, true); console.log(&quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;accelerometer_data&quot;).innerHTML = &quot;X=&quot; + X + &quot;, Y=&quot; + Y + &quot;, Z=&quot; + Z; } 二，实验现象Step1：浏览器现象在浏览器中重新加载程序并进行测试。结果应该是这样的: Step2：开发板现象通过点击按钮，该现象与MicroBit蓝牙设备进行读写特性（三）现象一致。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"MicroBit蓝牙设备进行读写特性（三）","slug":"MicroBit蓝牙设备进行读写特性（三）","date":"2020-06-21T08:41:00.000Z","updated":"2020-06-21T14:59:39.072Z","comments":true,"path":"2020/06/21/MicroBit蓝牙设备进行读写特性（三）/","link":"","permalink":"http://www.tpjun.top/2020/06/21/MicroBit蓝牙设备进行读写特性（三）/","excerpt":"","text":"在MicroBit开发板服务添加成功后，我们要修改电脑端源码进行读写操作，从而控制开发板LED灯的亮灭。 一，修改源码Step1:阅读特性的相关代码function readModelNumber() { console.log(&quot;readModelNumber&quot;); // state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } if (!has_device_information_service) { alert(&quot;Error: The connected device does not contain the device information service&quot;); return; } if (!has_model_name_string) { alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; } model_number_string.readValue() .then(value =&gt; { data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML = model_number_string; }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; }); } Step2:写特性的相关代码 function randomLEDs() { console.log(&quot;randomLEDs&quot;); //state validation if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return } if (!services_discovered)//有没有发现所有服务 { alert(&quot;Error: Service discovery has not yet completed&quot;); return } if (!has_led_service) { alert(&quot;Error: The connected device does not contain the LED service&quot;); return } if (!has_led_matrix_state)//led灯的特性有没有被发现的一个标记变量 { alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; } var led_array = [0, 0, 0, 0, 0]; //math.random():0~1 math.floor(x):返回小于等于x的最大整数 led_array[0] = Math.floor(Math.random() * 32); led_array[1] = 1; led_array[2] = 2; led_array[3] = 3; led_array[4] = 4; var led_matrix_data = new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer)//控制板子上灯亮灭 .then(_ =&gt; { console.log(&#39;LED matrix state changed&#39;); }) .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; +error); return; }); } Step3:HTML相关代码的修改&lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态 --&gt; &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;!--表格的第一行 --&gt; &lt;td&gt;&lt;b&gt;Connected&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Service Discovery Completed&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!--表格的第二行 --&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;h2&gt; Device Discovery Or Disconnect &lt;!-- 扫描/发现蓝牙设备 --&gt; &lt;/h2&gt; &lt;button id=&quot;btn_scan&quot; onclick=&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;/button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;/h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;/h3&gt; &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;/button&gt; &lt;h3&gt;Read Characteristic - Model Number&lt;/h3&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model Number&lt;/button&gt; &lt;div id=&quot;model_number&quot;&gt;&lt;/div&gt; &lt;hr&gt; &lt;/body&gt; 二，代码解析1.你的蓝牙设备应该包含GATT设备信息服务，该服务至少应该包含模型名称字符串特征。我们将读取它的值并在web页面中显示结果。函数readModelNumber() 就是读特性所调用的函数。只有当我们成功连接到一个设备时，才能执行读取和写入特征值。在进行读或写操作之前，我们还需要知道所连接的设备包含所需的服务和特性。因此，服务发现也必须完成。因此，在readModelNumberl()和randomLEDs()函数开始时，我们将在开始时执行一些简单的防御性验证，以检查我们已经达到了所需的状态，以下代码就是防御性验证: if (!connected) { alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; } if (!services_discovered) { alert(&quot;Error: Service discovery has not yet completed&quot;); return; } ...... 2.完成防御性验证，我们就开始读值，然后将其打印出来。Uint8Array是8 位无符号整数值的类型化数组，将读到的值赋给data。TextDecoder接口表示用于特定文本编码的解码器，例如 UTF-8,ISO-8859-2，KOI8-R等。 data = new Uint8Array(value.buffer); model_number_string = new TextDecoder(&quot;utf8&quot;).decode(data); console.log(model_number_string); 3.如果前面的函数有出错的，.catch的作用是捕捉前一个函数的错误,并将错误打印出来，供编码者观看。 .catch(error =&gt; { console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); 4.对于写特性，我们将看到写入特征值与读取特征值是很相似的。我们将编写一个值到LED矩阵中，在BBC开发板上控制5 x5 LED矩阵LED开启和关闭。规则如下： 为了简单起见，我们将让代码生成一个范围为0到31的随机值就是通过函数math.random():0~31，math.floor(x):返回小于等于x的最大整数。当我们将它写入BBC micro:bit时，每当我们点击网页上的按钮时，LED矩阵就会显示一个随机的图案。led_array[1] = 1; led_array[2] = 2;…..这些值是写入的特定值，您可以控制这些值，选择权在你。 led_array[0] = Math.floor(Math.random() * 32); led_array[1] = 1; led_array[2] = 2; led_array[3] = 3; led_array[4] = 4; 5.在使用这些函数时，我们需要点击网页上Randomise LEDs，Read Model Number按钮，来调用这些函数。 &lt;button id=&quot;btn_write&quot; onclick=&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;/button&gt; &lt;button id=&quot;btn_read&quot; onclick=&quot;readModelNumber()&quot;&gt;Read Model Number&lt;/button&gt; 6.程序编辑好后打开，在浏览器中按F12，观察。 实验现象： 1.表示连接成功。 2.通过点击Randomise LEDs,来改变LED灯的亮灭。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"MicroBit蓝牙设备添加服务（二）","slug":"MicroBit添加服务 (二)","date":"2020-06-17T13:30:00.000Z","updated":"2020-06-23T16:19:42.523Z","comments":true,"path":"2020/06/17/MicroBit添加服务 (二)/","link":"","permalink":"http://www.tpjun.top/2020/06/17/MicroBit添加服务 (二)/","excerpt":"","text":"继Micro:bit蓝牙设备成功连接之后，就需添加相应的服务特性。我们的开发板在成功连接之后，我们不能让其只处于连接，我们要慢慢控制板子，优化程序，要想使用板子上的功能，就需要将相应的服务添加上去，让开发板激活相应的服务功能，近而通过修改电脑端源码进行操控板子。 Step1:发现服务和特性1.大家在我的 BBC MicroBit蓝牙设备系列（一）中从https://makecode.microbit.org/v0/89975-20684-84568-20127 下载固件到BBC Micro:bit开发板时，会发现，我们的这个BBC MicroBit开发板板服务在程序设计时已经包含了蓝牙加速计服务和蓝牙led服务。 2.大家可以打开Chrome自带的蓝牙工具chrome://bluetooth-internals/#adapter进行蓝牙连接，怎样连接在系列（一）可自行观看，连接成功后通过开发商提供的资料链接https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html ，这里都是关于开发板的服务和特性的UUID号，每个服务都对应的UUID号，连接成功后，我们可以看到，当相对应的服务UUID号一致则说明你的服务已添加成功。 Step2：如何给BBC Microbit开发板添加服务1.在蓝牙连接的状态下，打开https://makecode.microbit.org/v0/89975-20684-84568-20127 进行在线源码编辑： 搜索蓝牙，相应的蓝牙服务就出来了，这里添加的是蓝牙温度服务将方块拖到图片的位置。 然后保存，下载。 2.在你的此电脑&gt;下载路径下就有你下载的.hex文件，将下载的固件.hex文件移到开发板对应的MINCROBIT（G)盘中，这个时候打开Chrome自带的蓝牙工具，进行连接，连接成功后会发现服务已被添加成功。 Step3：修改电脑端源码增加温度服务、特性所要添加代码如下： &lt;html&gt; &lt;head&gt; &lt;!-- 用于定义文档的头部，描述了文档的各种属性和信息。&lt;head&gt; 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。 --&gt; &lt;script&gt; var selected_device; // 保存用户选择的蓝牙设备 var connected_server; // 保存用户连接的蓝牙设备 var connected = false; //,保存电脑蓝牙的当前连接状态 var services_discovered = false; // presence of services and characteristics var has_accelerometer_service = false; var has_accelerometer_data = false; var has_led_service = false; var has_led_matrix_state = false; var has_device_information_service = false; var has_model_name_string = false; var has_temperature_serivce = false; var has_temperature = false; // service UUIDs ACCELEROMETER_SERVICE = &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE = &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE = &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE = &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; // characteristic UUIDs ACCELEROMETER_DATA = &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE = &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING = &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE = &#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; // cached characteristics var led_matrix_state; var model_number_string; var accelerometer_data; var temperature; // var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() { console.log(&quot;discoverDevicesOrDisconnect&quot;); if (!connected) discoverDevices(); else { selected_device.gatt.disconnect(); } } function onDisconnected() { console.log(&quot;onDisconnected&quot;); resetUI(); } function discoverDevices() { console.log(&quot;discoverDevices&quot;); //console.log：控制台打印输出 var options = {acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE, TEMPERATURE_SERVICE] } //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) //Navigator对象：包含有关浏览器的信息。 .then(device =&gt; { console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); }) .catch(error =&gt; { alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; + error); }); } function connect() { console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) //表示连接成功 { console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected=&quot; + server.connected); selected_device.addEventListener( &#39;gattserverdisconnected&#39;,onDisconnected); connected_server = server; discoverSvcsAndChars(); setConnectedStatus(true); //设置电脑蓝牙的当前连接状态 }, function (error) //表示连接失败 { console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); // 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 } ); } function setConnectedStatus(status) ,设置电脑蓝牙的当前连接状态 { connected = status; document.getElementById(&#39;status_connected&#39;).innerHTML = status; if (status == true) { document.getElementById(&#39;btn_scan&#39;).innerHTML = &quot;Disconnect&quot;; } else { document.getElementById(&#39;btn_scan&#39;).innerHTML = &quot;Discover Devices&quot;; } } function setDiscoveryStatus(status) { services_discovered = status; document.getElementById(&#39;status_discovered&#39;).innerHTML = status; } function resetUI() { setConnectedStatus(false); setDiscoveryStatus(false); } function discoverSvcsAndChars() { console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() .then(services =&gt; { has_accelerometer_service = false; has_led_service = false; has_temperature_serivce = false; has_device_information_service = false; services_discovered = 0; service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service =&gt; { if (service.uuid == ACCELEROMETER_SERVICE) { has_accelerometer_service = true; } if (service.uuid == LED_SERVICE) { has_led_service = true; } if (service.uuid == TEMPERATURE_SERVICE) { has_temperature_serivce = true; } if (service.uuid == DEVICE_INFORMATION_SERVICE) { has_device_information_service = true; } console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics =&gt; { console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered = 0; characteristic_count = characteristics.length; characteristics.forEach(characteristic =&gt; { characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid == ACCELEROMETER_DATA) { accelerometer_data = characteristic; has_accelerometer_data = true; } if (characteristic.uuid == LED_MATRIX_STATE) { led_matrix_state = characteristic; has_led_matrix_state = true; } if (characteristic.uuid == TEMPERATURE) { temperature = characteristic; has_temperature = true; } if (characteristic.uuid == MODEL_NUMBER_STRING) { model_number_string = characteristic; has_model_name_string = true; } if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) { console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); //setDiscoveryStatus(true); } }); }); }); }); } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态 --&gt; &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;!--表格的第一行 --&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!--表格的第二行 --&gt; &lt;td id=&quot;status_connected&quot;&gt; false &lt;/td&gt; &lt;td id=&quot;status_discovered&quot;&gt; false &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;h2&gt; Device Discovery Or Disconnect &lt;!-- 扫描/发现蓝牙设备 --&gt; &lt;/h2&gt; &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;/button&gt; &lt;/body&gt; &lt;/html&gt; Step4：代码解析1.开头添加的标志变量has_accelerometer_service，has_led_service，has_device_information_service，has_temperature_serivce，用于核对BBC MicroBit有没有相应的服务，有true无false。而has_accelerometer_data ，has_led_matrix_state，has_model_name_string，has_temperature 用于核对特性是否存在。service UUIDs 和 characteristic UUIDs用于核对板子的特性和服务来进行连接。led_matrix_state，model_number_string，accelerometer_data，temperature，这些都是定义特性相应的变量。service_count，characteristic_count服务和特性发现的数量。services_discovered，characteristics_discovered应该被发现服务和特性的数量 2.这里要添加service UUID和characteristic UUID号，用来进行与开发板中服务UUID号进行核对。 // service UUIDs ACCELEROMETER_SERVICE = &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE = &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE = &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE = &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; // characteristic UUIDs ACCELEROMETER_DATA = &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE = &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING = &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE = &#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; 3.函数function discoverSvcsAndChars()是用来发现开发板的服务和特性，使用该函数connected_server.getPrimaryServices()获取BBC MicroBit板子上的主要服务。 console.log(&quot;discoverSvcsAndChars server=&quot; + connected_server); connected_server.getPrimaryServices() 4.service_count = services.length是表示发现BBC MicroBit板服务的个数，并将发现的服务打印出来。 service_count = services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); 5.接下来我们要对已发现的服务通过if函数进行判断，核对是否一致。完成后要将一致的uuid号打印输出，然后 函数service.getCharacteristics()要获取该服务下的所有特性，对该特性通过if语句判断进行核对。 if (characteristic.uuid == ACCELEROMETER_DATA) { accelerometer_data = characteristic; //把发现的相应特性保存到相应变量中 has_accelerometer_data = true; } ...... 6.最后要把要发现的服务和特性数量与已发现的服务和特性数量进行核对。如果一致则成功，将打印FINISHED DISCOVERY。 if (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) { console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); } 7.在信息核对一致成功后，我们要把setDiscoveryStatus(true)状态true通过函数function setDiscoveryStatus(status) 显示出来，表示添加服务及其特性成功了，这样就结束啦！ function setDiscoveryStatus(status) { services_discovered = status; document.getElementById(&#39;status_discovered&#39;).innerHTML = status; } 8.程序编辑好后打开，在浏览器中按F12，观察。 实验现象： Step5：资源1.有关microbit开发板各服务、特性的教程式参考资源： https://lancaster-university.github.io/microbit-docs/ble/profile/ 2.服务、特性的UUID请见： https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html 3.Chrome浏览器的插件，使用它可以查看周边蓝牙设备的信息：状态、服务、特性、描述符等。 chrome://bluetooth-internals/#adapter 4.BBC MicroBit开发板网页编辑器 https://makecode.microbit.org/#editor","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"MicroBit蓝牙设备连接教程（一）","slug":"MicroBit蓝牙设备连接(一)","date":"2020-06-16T12:00:00.000Z","updated":"2020-06-19T14:38:49.960Z","comments":true,"path":"2020/06/16/MicroBit蓝牙设备连接(一)/","link":"","permalink":"http://www.tpjun.top/2020/06/16/MicroBit蓝牙设备连接(一)/","excerpt":"","text":"Micro:bit是由英国BBC公司推出的一款手持式可编程的微型计算机，可用于各种很新潮的创新，从机器人到乐器 – 无止尽，从小学到大学，非常容易开始，拥有无限可能性！一块BBC小板子上有温度传感器和光线传感器，运动传感器（加速度和指南针），2个可编程按钮，25颗独立可编程的LED，无线通讯，通过无线电和蓝牙等常用设备，无需安装任何软件， 你可以通过任意一个网页浏览器在 Blocks、 Javascript、Python、Scratch等编辑器上编写代码。费用比绝大多数玩具低——值得你入坑。 接下来就是入坑时刻，在这里简绍连接Micro:bit蓝牙设备的两种方法。 方法一本机使用windows 10系统，进行操作。 Step1：打开电脑蓝牙 step2：下载固件到开发板如果microbit开发板想和我们的电脑通过蓝牙进行无线通信，我们就需要启动板子的蓝牙设备功能，因此要下载固件到开发板中进行激活。 https://makecode.microbit.org/v0/89975-20684-84568-20127 打开上面链接下载固件，然后用USB线连接开发板和电脑，将下载的固件.hex文件移到开发板对应的MINCROBIT（G)盘中，这个时候会发现板子上黄色小灯不停闪烁，这说明在下载中，然后板子中LED小灯会显出Hi！,这就说明下载成功。 step3：使用谷歌浏览器工具打开Chrome浏览器输入以下网址：chrome://bluetooth-internals/#adapter 找到对应的板子蓝牙（BBC micro:bit）进行连接。 出现connected表示连接成功 板子出现以上结果显示C表示设备连接成功。 方法二在方法一中step1和step2的基础上，进行程序编写，也可实现BBC micro:bit蓝牙设备连接，在这里编辑器我用的是Adobe Dreamweaver和Notepad++，这两个软件都可下载安装。程序编写使用Html和JavaScript语法，文件格式是.html然后用浏览器本地打开即可。程序内容如下： &lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; // 保存用户选择的蓝牙设备 var connected_server; //保存用户连接的蓝牙设备 var connected=false; //保存电脑蓝牙当前连接状态 function discoverDevices() { console.log(&quot;discoverDevices&quot;); //consol.log 控制台打印输出 var options = {acceptAllDevices:true} //发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) //Navigator对象，包含有关游览器的信息 .then(device =&gt; { console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device = device; console.log(selected_device); connect(); }) .catch(error =&gt;{ alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); }); } function connect() { console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) //表示连接成功 { console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected=&quot; + server.connected); connected_server = server; setConnectedStatus(true); }, function(error) //表示连接失败 { console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); } ); } function setConnectedStatus(status) { connected=status; document.getElementById(&#39;status_connected&#39;).innerHTML=status; if(status==true) { document.getElementById(&#39;btn_scan&#39;).innerHTML=&quot;Disconnect&quot;; } else { document.getElementById(&#39;btn_scan&#39;).innerHTML=&quot;Discover Devices&quot;; } } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;/h2&gt; &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;/b&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td id=&quot;status_connected&quot;&gt;False&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;h2&gt;Device Discovery &lt;/h2&gt; &lt;!-- 扫描/发现蓝牙设备 --&gt; &lt;button id=&quot;btn_scan&quot; onclick=&quot;discoverDevices()&quot;&gt; Start scan &lt;/button&gt; &lt;/body&gt; &lt;/html&gt; 1.首先我们要通过文本按钮来扫描发现周边设备，这个按钮按下后要调用相应的函数来进行扫描，这里的id号自由定义，但要自己明白，onclink表示只要按钮按下函数就开始调用： &lt;button id = &quot;btn_scan&quot; onclick=&quot;discoverDevices()&quot;&gt;Start scan 2.函数navigator.bluetooth.requestDevice的功能为发现蓝牙设备，必须由用户的手动触发： navigator.bluetooth.requestDevice(options) 3.这个时候将发现的蓝牙设备的名字和ID通过控制台打印输出： console.log(&#39;&gt; Name:&#39; +device.name); console.log(&#39;&gt; Id:&#39; +device.id); console.log(&#39;&gt; Connected:&#39; +device.gatt.connected); 4.在扫描后出现众多的蓝牙设备中，用户要选择自己的蓝牙设备，selected_device = device;这句语句就是将用户选择的蓝牙设备赋给开始定义的变量selected_device给保存起来。 selected_device = device; console.log(selected_device); 5.这个时候BBC板子蓝牙被扫描到后，我就需要进行连接，这里我们编写connect()；这个函数用于连接，来实现蓝牙设备的连接，connecting表示设备正在连接,函数selected_device.gatt.connect()的调用会通过浏览器来将你选择的外部设备与你的电脑蓝牙进行连接。 console.log(&quot;connecting&quot;); selected_device.gatt.connect(); 6.若是最后连接成功会打印输出该蓝牙设备的id等信息，connected_server = server语句就是将已连接的蓝牙设备赋给开始定义的变量connected_server给保存起来。 console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected=&quot; + server.connected); connected_server = server; 7.设备连接成功后，我们尽可能的完善功能，将连接的状态显示出来，函数function setConnectedStatus(status)就是用来设置电脑连接的状态，通过按钮(Disconnect)可控制蓝牙状态的断开。connected这是一个全局变量用来保存电脑蓝牙当前连接状态（status），将状态值true或者false赋给connected。 connected=status; document.getElementById(&#39;btn_scan&#39;).innerHTML=&quot;Disconnect&quot; 操作步骤如下 连接成功。现象也是在开发板上显示C","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"电影《一个母亲的复仇》","slug":"电影《一个母亲的复仇》","date":"2020-06-10T08:30:00.000Z","updated":"2020-06-16T03:23:36.484Z","comments":true,"path":"2020/06/10/电影《一个母亲的复仇》/","link":"","permalink":"http://www.tpjun.top/2020/06/10/电影《一个母亲的复仇》/","excerpt":"","text":"《一个母亲的复仇》是由拉维·德耶瓦尔执导，希里黛玉、萨佳·阿里主演的剧情片。该片讲述了艾莉亚被同学强奸后，她的继母戴维琪开始为女儿报仇的故事。该片于2017年7月7日在印度上映。2019年5月10日在中国大陆上映 这是我近期看到的一部电影，推荐给大家，时长2个多小时，故事情节并不稀奇，但让人感触很深——正义到不了的地方还有母亲！ 本片改编自震惊印度的“德里黑公交案”,影片中戴维琪是位继母，戴维琪将艾莉亚看做亲生女儿一般对待，但这份爱艾莉亚在影片刚开始并没有接受。刚满18岁的小女孩艾莉亚因为喜欢的人，参加了一次派对活动后遭到轮奸强暴，最后被扔进了野沟中，死里逃生的她指正了四名罪犯，面对证据确凿的罪犯，却被法庭判为无罪。自己的丈夫却因为抗议法庭的不公正审判，遭到关押。 戴维琪悲愤，艾莉亚更是绝望，戴维琪不愿事情就这样结束，既然世间没有正义，那么我就代替神明来审判。戴维琪依靠私家侦探提供线索，惩治四位罪犯。 这部电影有一句非常能够打动人心的台词：人人都信神，但是神也有照顾不到的地方，神和正义到不了的地方，还有母亲！ “迟到的正义还是正义吗？” 虽然正义终将到来，但我和女儿已经等不起，崩溃、愤怒、失望、无助。母亲站了起来，开车撞人未遂是母爱的冲动，精心计划是母亲的深爱。上帝偶尔也会打了个盹，不能时刻关注我们，因此才有了母亲。 愿每个人都能善良对人，平心对事，正直做人！","categories":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}]},{"title":"Sakura主题的安装","slug":"Sakura的主题安装","date":"2020-05-26T05:19:00.000Z","updated":"2020-05-26T07:31:10.668Z","comments":true,"path":"2020/05/26/Sakura的主题安装/","link":"","permalink":"http://www.tpjun.top/2020/05/26/Sakura的主题安装/","excerpt":"","text":"如果觉得默认的landscape主题不好看，那么可以在Hexo官方主题页，选择你喜欢的一个主题进行修改就可以啦。每个主题的使用方法略有不同，所以如果你是跟我一样的小白，建议使用流行热门的主题，这样出现问题网上基本都可以搜到解决方法。 安装主题在这里我建议小白使用Next主题这个主题,因为这个主题网上的解决方法比较多，以便大家实现主题优化。这里我用的是Sakura主题，最初我用的是Next主题，因个人喜好换了一个偏二次元的主题，接下来的操作是我对Sakura主题的安装与优化。希望能帮助大家。 1.点击Hexo官方主题页 搜索Sakura，然后点击名字，点击图片是预览这个主题页面，点击名字进行安装。 2.点击clone or download复制 3.在你的博客根目录下鼠标右击点击git bash，在窗口中输入： git clone git@github.com:honjun/hexo-theme-sakura.git 会接着显示如下： 1 | Cloning into &#39;themes/next&#39;... 2 | remote: Enumerating objects: 8, done. 3 | remote: Counting objects: 100% (8/8), done. 4 | remote: Compressing objects: 100% (8/8), done. 5 | remote: Total 7195 (delta 0), reused 1 (delta 0), pack-reused 7187 6 | Receiving objects: 100% (7195/7195), 5.57 MiB | 652.00 KiB/s, done. 最后尾部会显示： Checking connectivity... done. 主题下载成功后存放如下目录：博客根目录themes/对应的主题文件夹名称（Sakura）。 接下来的博文，会对这个主题进行优化。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"Verilog HDL笔记（二）","slug":"Verilog HDL笔记（二）","date":"2020-05-21T08:30:00.000Z","updated":"2020-05-20T09:51:40.875Z","comments":true,"path":"2020/05/21/Verilog HDL笔记（二）/","link":"","permalink":"http://www.tpjun.top/2020/05/21/Verilog HDL笔记（二）/","excerpt":"","text":"1.闪烁灯分频(4个交替闪烁）module light(clk,ledout);//clk是一个信号 intput clk; output[7:0] ledout; reg[7:0] ledout; reg[24:0] count; initial ledout=8&#39;h0f; always@(posedge clk) begin count=count+1; if(count==24000000) begin ledout=~ledout; count=0; end end endmoudule 异或：相同为0，相异为1。clk在18引脚 2.L1灯以0.5秒周期闪烁（即亮0.25秒，灭0.25秒），L2灯以2秒周期闪烁，其余灯灭。module ttt(ledout,clk); input clk; output [7:0] ledout; reg[7:0] ledout; reg[22:0] count0;//1/24000000*X=0.25;X=6000000; reg[24:0] count1;·· //reg clk1; initial ledout=8&#39;b11111100; always@(posedge clk) begin count0=count0+1; if(count0==6000000) begin ledout[0]=~ledout[0]; count0=0; //clk1=~clk1; end end always@(posedge clk) begin count1=count1+1; if(count1==12000000) begin ledout[1]=~ledout[1]; end end endmodule 3.（老师） L1灯以0.5秒周期闪烁（即亮0.25秒，灭0.25秒），L2灯以2秒周期闪烁，其余灯灭### 方法一： module light（clk，ledout） input clk； output[7:0] ledout; reg[7:0] ledout; reg[22:0] count0; reg[24:0] count1; initial ledout=8&#39;hff; always@(posedge clk) begin count0=count0+1; if(count0==23&#39;d6000000) begin ledout[0]=~ledout[0]; // ledout=ledout^8&#39;h01;//与上面的一样 count0=0; end end alway@(posedge clk) begin count1=count1+1; if(count1==25&#39;d12000000) begin ledout[1]=~ledout[1]; count1=0; end end endmodule ### 方法二： module test(clk,ledout); input clk; output[7:0] ledout; reg[7:0] ledout; reg[23:0] count; reg[3:0] flag; initial begin ledout=8&#39;hff; flag=0； end always@(posedge clk) begin count=count+1; if(count==24&#39;d12000000) begin ledout=ledout&lt;&lt;1; flag=flag+1; if(flag&gt;8) begin ledout=8&#39;hfe;//8&#39;11111111 flag=0; end count=0; end end endmodule 4.流水灯逐个闪烁，其余灭module test(clk,ledout); input clk; output[7:0] ledout; reg[7:0] ledout; reg[23:0] count; reg[3:0] flag; initial ledout=8&#39;hfe;//高到低移8&#39;h7f always@(posedge clk) begin count=count+1; if(count==24&#39;d12000000) begin ledout=(ledout&lt;&lt;1)+1;//+128 //ledout={ledout[0],ledout[7:1]}//{}拼接运算符 flag=flag+1; if(flag==8) begin ledout=8&#39;hfe;//8&#39;h7f flag=0; end count=0; end end endmodule 5.译码器设计概念：较少的输入控制较多的输出。译码器可分为：变量译码器和显示译码器。 module code3_8(sw,ledout,seg); input[2:0] sw; output[7:0] ledout; reg[7:0] ledout; reg[7:0] seg; initial begin seg=8&#39;h00; ledout=8&#39;hff; end always@(sw) begin case(sw) 3&#39;b000:ledout=8&#39;b11111110; 3&#39;b001:ledout=8&#39;b11111101; 3&#39;b010:ledout=8&#39;b11111011; 3&#39;b011:ledout=8&#39;b11110111; 3&#39;b100:ledout=8&#39;b11101111; 3&#39;b101:ledout=8&#39;b11011111; 3&#39;b110:ledout=8&#39;b10111111; 3&#39;b111:ledout=8&#39;b01111111; default:ledout=8&#39;b11111111; endcase case(sw) 3&#39;b000:seg=8&#39;h06;//共阴数码管8&#39;h06 3&#39;b001:seg=8&#39;h5b;//8&#39;h5b 3&#39;b010:seg=8&#39;h4f;//8&#39;h4f 3&#39;b011:seg=8&#39;h66;//8&#39;h66 3&#39;b100:seg=8&#39;h6d;//8&#39;h6d 3&#39;b101:seg=8&#39;h7d;//8&#39;h7d 3&#39;b110:seg=8&#39;h07;//8&#39;h07 3&#39;b111:seg=8&#39;h7f;//8&#39;h7f default:seg=8&#39;h00;//8&#39;h00 endcase end endmodule sw2~0（拨码开关）&gt;&gt;引脚71 72 73seg0&gt;&gt;引脚124seg1&gt;&gt;123seg2&gt;&gt;121seg3&gt;&gt;120seg4&gt;&gt;119seg5&gt;&gt;125seg6&gt;&gt;127seg7&gt;&gt;122 6.小灯逐个亮，从左到右，从右到左（自己）module test(clk,ledout); input clk; output[7:0] ledout; reg[7:0] ledout; reg[24:0] count; reg flag; //reg[3:0] flag;2^4=16位 1111 1111 1111 1111 initial begin ledout=8&#39;hfe; flag=0; end always@(posedge clk) begin count=count+1; if(count==24000000) begin if(flag==0) ledout=(ledout&lt;&lt;1)+1; else ledout=(ledout&gt;&gt;1)+128; if(ledout==01111111) flag=~flag; if(ledout==11111110) flag=~flag; count=0; end end endmodule 7.模块化流水灯module ledwater(clk,ledout);//主模块 input clk; output[7:0] ledout; wire clk_temp; divclk(clk,clk_temp); ledmove(clk_temp,ledout); endmodule module divclk(clkin,clkout);//子模块 input clkin; output clkout; reg clkout; reg[24:0] count; always@(posedge clk)//只记数 begin count=count+1; if(count==24000000) begin clkout=~clkout; count=0; end end endmodule module ledmove(clkin,led)//子模块 input clkin; output[7:0] led; reg[7:0] led; reg[3:0] flag; initial led=8&#39;h7f; always@(posedge clkin)//只流水 begin ledout=(ledout&gt;&gt;1)+128; flag=flag+1； if(flag==8) begin led=8&#39;h7f; flag=0; end end endmodule 8.编写代码,实现流水灯功能（要求：每2秒流水一次，只能亮一个小灯，一个小灯从右向左跑，跑到头后，再从左向右跑，如此循环……)module test(clk,ledout); input clk; output[7:0] ledout; wire clk_temp; divclk(clk,clk_temp); ledmove(clk_temp,ledout); endmodule module divclk(clkin,clkout); input clkin; output clkout; reg clkout; reg[25:0] count; always@(posedge clkin) begin count=count+1; if(count==24000000) begin clkout=~clkout; count=0; end end endmodule module ledmove(clkin,led); input clkin; output[7:0] led; reg[7:0] led; reg flag; initial begin led=8&#39;h7f;//从右往左 flag=0; end always@(posedge clkin) begin if(!flag)//flag==0 led=(led&gt;&gt;1)+128; else //flag==1 led=(led&lt;&lt;1)+1; if(led==11111111) begin if(!flag) begin led=8&#39;hfe; flag=~flag; end else begin led=8&#39;h7f; flag=~flag; end end end endmodule","categories":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}]},{"title":"Verilog HDL笔记(一)","slug":"Verilog HDL笔记（一）","date":"2020-05-20T08:30:00.000Z","updated":"2020-05-20T09:53:44.433Z","comments":true,"path":"2020/05/20/Verilog HDL笔记（一）/","link":"","permalink":"http://www.tpjun.top/2020/05/20/Verilog HDL笔记（一）/","excerpt":"","text":"一，Verilog HDL语言数据类型1．常量（1）数字常量 Verilog HDL 语言中的数值集合由以下 4 个基本的值组成： 1——代表逻辑 1 或真状态； 0——代表逻辑 0 或假状态； X（或 x）——代表逻辑不定态； Z（或 z）——代表高阻态2．变量Verilog HDL 语言中的变量可分为两种：一种为线型，另一种为寄存器型wire,tri 连线类型wor,trior 具有线或特性的连线wand,triand 具有线与特性的连线tri1,tri0 分别为上拉电阻和下拉电阻supply1,supply0 分别为电源（逻辑 1）和地（逻辑0）寄存器型变量需要被明确地赋值，并且在被重新赋值前一 直保持原值，必须将寄存器型变量放在过程块语句中，通过过程赋值语句赋值。reg 型变量是 最常用的一种寄存器型变量，它的定义格式与 wire 型类似，具体格式为：reg 数据名 1，数据名 2，……，数据名 n； reg[n-1:0] 数据名 1，数据名 2，……，数据名 n；例如：reg a,b; //定义了两个 reg 型变量 a,b;这两个变量的宽度均是 1 位reg [7:0] ledout; //定义了 1 个 8 位 reg 型变量 ledout 二，结合程序分析module temp(ledout); // output ledout;//端口，默认是线性 output[7:0] ledout;// wire[7:0] ledout//线性型 //reg[7:0] ledout//寄存器型变量 //assign ledout=8&#39;hff;//连续赋值语句不能出现在过程块中 reg[15:0] l,m,n,p;//过程赋值语句只出现在过程块中 initial//相当于初始化只能执行一次 begin p=0; end assign ledout=8&#39;hff; always//相当于while(1) begin // ledout=8&#39;hff;//寄存器型变量 end //always@( k1)//执行always语句根据k1值的变化，而执行，k1值变化，此语句执行，不变化不执行。 //always@(posedge k1)//k1松开时执行语句(有上升沿，则执行） //always@(negedge k1)//k1按下时执行语句（有下降沿，则执行） always begin//过程块中语句顺序是从上到下 m=8&#39;h0f;//阻塞型过程赋值语句有先后顺序，从上到下。 n=8&#39;h00; // l&lt;=8&#39;hf0;//非阻塞型过程赋 值语句无先后顺序，同时执行 // m&lt;=8&#39;h0f; // n&lt;=8&#39;h00 //这三个同时执行 if(m&gt;8)//这个语句与上面的非阻塞型过程赋 值语句是有先后的 m=n; case(m)//case语句相当于switch 1: ; 2: ; default: ;//如果上面选项值没有与表达式的值相等时，就执行此缺省语句。 endcase end always begin //for(l=0;l&lt;200;l=l+1) l=0;//先定义 while(l&lt;200) begin//多条语句时使用begin---end p=p+1; l=l+1; end end endmodule #在module中可以多次使用always，他们是并行执行，没有先后顺序#过程赋值语句要用寄存器型变量赋值，连续赋值语句要用线型变量赋值#连续赋值语句以关键词 assign 为先导；而过程赋值语句不需要任何 先导的关键词#过程赋值语句有两种赋值形式：阻塞型过程赋值和非阻塞型过程赋 值#过程赋值语句不需要任何 先导的关键词，但是，语句的赋值分为阻塞型和非阻塞型 四，条件语句和循环语句1.Verilog HDL 语言中的条件语句有两种，即 if-else 语句和 case 语句2.条件语句必须在过程块中使用，必须是always或initial的子句。3.if条件句 格式1： if（表达式） begin 语句1； 语句2; end else//条件为0，x，z时，执行以下语句 语句3； 格式二： if（表达式） 语句1； else if（表达式） 语句2； ....... else if (表达式N） ...... else 语句N+1； 4.循环语句：下面举例用 while 语句对 8 位二进制数中值为 1 的位进行计数 reg[7:0] temp；//定义了位宽为8的寄存器temp integer count = 0；//定义整数类型count作为计数器 temp = rega；//temp被赋值了8位二进制数的值 while（temp）//判断temp是否为0，当为1时执行下面循环体 begin if（temp[0]） count = count + 1；// 如果temp最低位 为1，执行count+1 temp = temp &gt;&gt; 1； //最低位移除，最高位补零，其余右移。然后再次判断temp是否非零，若非零，接着判断temp的最低位是否为1，就是上次循环的次低位。 end 5.for语句：下面举例用 for 语句对 8 位二进制 数中值为 1 的位进行计数。 reg[7:0] temp； integer count = 0； for（temp = rega；temp!=0；temp = temp &gt;&gt;1） if（temp[0]） count = count + 1； 三、编写程序1.统计实验板上K1~K8中有多少个按键被按下？并把结果显示在8个小灯上（说明：如果有3个键被同时按下，则亮3盏灯，如果有4个键同时按下，则亮4盏灯，……）。module test(key,ledout); input[7:0] key; output[7:0] ledout; reg[7:0] temp; reg[7:0] ledout; integer count; integer i; always@(key) begin temp=key;////temp=~key count=0; for(i=0;i&lt;8;i=i+1) begin if(temp[0]==0) count=count+1; temp=temp&gt;&gt;1; end end always begin ledout=8&#39;b11111111; ledout=ledout&lt;&lt;count;////（8-cout） end endmodule verilog HDL建模（原理图建模，门级建模，数据流建模，行为建模，混合建模） LED小灯引脚对应芯片是29~32,37~40。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}]},{"title":"购买域名+github绑定域名","slug":"购买域名+github绑定域名","date":"2020-04-26T11:13:00.000Z","updated":"2020-04-26T11:14:08.053Z","comments":true,"path":"2020/04/26/购买域名+github绑定域名/","link":"","permalink":"http://www.tpjun.top/2020/04/26/购买域名+github绑定域名/","excerpt":"","text":"购买域名+Github绑定域名 关于购买域名不是强求的，也可以使用github pages给你的免费域名，但这个域名太长，在进行输入时会很不方便，所以建议购买域名，这样给你自己带来了方便，也给别人带来了方便 Step1：购买选择域名1.进入阿里云官网，选择支付宝登录或者直接注册。2.搜索你想要的域名（只能输入英文），比如我搜索的就是lsdnf，点击结算后进入付款页面。3.在这里可以选择租期，在这里我们看到最大租期为十年，选择相应的租期即可，这里我们选择的是一年。域名持有者是个人。这一步还会让你填写信息模块和邮箱验证。4.填写完成后进行购买，完成后进入控制台。 Step2：Github绑定域名1.进入控制台，点击域名。2.域名解析，这里实名需要等待审核，大约1到2小时。（最终我选着的域名是tpjun.top）3.接下来获得IP，用于添加记录值，完成解析。怎么获取IP？打开cmd，输入,ping. 用户名.github.io4.添加记录值,这里要添加两个记录值，记录类型分别为A和CNAME，填写如下。填写标准如下显示：5.在blog\\source（博客根目录中的source）中新建CNAME记事本，内容输入www.tpjun.top【个人域名】，保存关闭。删除后缀.txt，效果如下：6.进入Github设置，进行绑定域名。完成后，这个过程需要等待几分钟。7.浏览器输入www.tpjun.top【个人域名】，就可以看到页面了。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"win10搭建Hexo——超详细","slug":"Win10+hexo","date":"2020-03-28T14:16:01.000Z","updated":"2020-04-04T16:48:51.663Z","comments":true,"path":"2020/03/28/Win10+hexo/","link":"","permalink":"http://www.tpjun.top/2020/03/28/Win10+hexo/","excerpt":"","text":"关于博客对于小白来说可以是一头雾水，由于网上的教程很多不完整，让人很头疼，接下来我对win10系统怎样搭建hexo搭建做个解析，可以帮助小白创建一个属于自己的博客。 Hexo简介Hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细的查看，这个可选择中文查看。 #搭建流程简绍：1.安装git 2.安装Nodejs 3.安装Hexo 4.注册Github账号并创建仓库 5.SSH相关配置 6.将Hexo部署到Github 7.发布文章 8.Hexo 常用的命令 #Step 1：安装Git 1.下载 点击Git官网下载对应的版本，win10一般是64位。 2.安装 在安装过程中一路next 3.检查git是否安装成功 在CMD窗口（R+win输入cmd即可打开CMD窗口)输入指令： git 等待。 到这里git就安装好了，这时会有一个Git Bash的命令工具（鼠标右击就会出现）。 #Step 2：下载配置Nodejs1.下载 进入nodejs下载，根据自己的电脑选择32位或64位。 2.安装 在安装过程中一路next即可。 3.检查是否成功 在CMD窗口（R+win输入cmd即可打开CMD窗口)输入指令： | node -v | npm -v 结果显示如下代表安装成功 #Step 3：安装Hexo前面git和nodejs安装好后，就可以安装hexo博客框架了。 首先创建一个文件夹，命名为你想要的名字，我的名字是blog，这个文件夹在后续就是用来存放你所创建博客的所有文件。这个文件也称根目录。 1.安装Hexo 在这个blog文件夹（你所创建的文件夹）下直接鼠标右键git bash打开，这个时候会有命令窗口弹出。或者（win+r）输入cmd，然后cd到你创建的blog文件夹。 在窗口中输入： npm install -g hexo-cli 然后等待安装，过程如下，这个过程需要的等待，请耐心。 2.检验是否安装成功 在窗口中接着输入hexo -v来检验是否安装成功 hexo -v 结果显示： 至此已全部安装完。 3.初始化网址 在窗口中接着输入： hexo init 这个过程可能会比较慢，请耐心等待 最后结果如下： added 432 packages in 59.037s INFO Start blogging with Hexo! 表明初始化已成功。 4.安装网址所需要的依赖插件 在窗口中接着输入： npm install 完成后，在你的根目录（blog文件夹）下会出现以下文件： 在这里解释一下： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 _config.yml: 博客的配置文件 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 5.生成静态网页和开启本地服务 在窗口中接着输入： hexo g//生成静态网址 hexo s//开启本地服务器 结果显示： 这就代表启动成功了。 在浏览器输入网址http://localhost:4000就可以查看你的本地博客网页了。 页面如下： 如果想关闭本地服务，Ctrl+C 就可以了 或者关闭这个命令窗口。 注：每次想浏览你的本地博客都需在你的根目录下鼠标右击打开git bash 在窗口中输入hexo s命令字符。 #Step4：注册Github账号并创建仓库1.注册github 首先你要在github上注册一个账号，步骤如下： 步骤1：填写你的用户名，Email，密码。 步骤2：进入Step1，填写用户名，Email,密码。后面会有验证，会通过qq邮箱发送给你，进行验证。 步骤3：进入Step2，选择仓库。 步骤4：进入Step3，让你做一些选择，完善一些信息。也可以直接跳过步骤，这样你的账号就注册好了。 2.创建仓库 注册完上面步骤后登录，进行以下创建仓库步骤： 步骤1：点击new repository新建 步骤2：创建一个和你用户名相同的仓库，如：你的用户名+.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别,也就是xxxx.github.io其中xxx就是你注册GitHub的用户名。我这里是已经建过了,所以会提示。 这样你的仓库就创建好了。 #Step5.SSH相关配置因为需要部署到你的github仓库，每次更改都要deploy ，如果不配置ssh key 每次你都需要输入github 账号密码，太过烦琐。 1.生成SSH 回到你根目录下的git bash窗口中，输入代码： git config --global user.name &quot;yourname&quot;//yourname填写你的github用户名 git config --global user.email &quot;youremail&quot;//youremail填写你的github的邮箱 上面的yourname 和 youremail分别指你的github用户名以及github绑定的邮箱。 可以用以下两条，检查一下你有没有输对： git config user.name git config user.email 然后在执行如下命令生成秘钥和公钥: ssh-keygen -t rsa -C &quot;youremail&quot; 执行了这个命令会提示存储路径和密码以及确认密码，你连续按三次Enter就好 Enter file in while to save the key(/C/Users/......) 执行命令时会有上面的代码，这就是你的存储路径，打开id_rsa.pub，将里面所有的内容全部复制出来。 注:id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 2.添加到github 到你的github主页点击右上角头像，setting -&gt; SSH and GPG keys，新建SSH key。 这里的title可以随便填写，我填的是我的用户名。key里面要把你的id_rsa.pub里面的信息复制进去，然后点击Add SSH key 这里验证一下是否连接成功，在根目录下的git bash中输入： ssh -T git@github.com 会有如下提示： The authenticity of host &#39;github.com (52.74.223.119)&#39; can&#39;t be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? 输入：yes，会有以下提示： Hi yremp2! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 这表示配置成功，就可以下一步操作了。 #Step6：将Hexo部署到Github1.修改配置文件 这一步是将hexo和Github关联起来，在你的博客根目录（我的是：Blog）下找到 _config.yml， 可以用记事本打开，在最下方找到： deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master repo中yourname是你的用户名。也可以如下获取： 注:配置文件里面所有 : 后面都有一个空格，没有会出错 2.开始部署 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。在根目录下的git bash中输入： npm install hexo-deployer-git --save 然后接着输入： hexo clean hexo g hexo d 注:输入hexo d时可能有时会跳出窗口要你输入username和password。 这个时候在你的github仓库中你会发现会出现跟你博客根目录一样的文件，你的根目录上的文件已经部署到你的github仓库上了。 打开浏览器，输入xxxx.github.io，这里请按照 你的github用户名.github.io 输入，就可以访问你的博客啦。 #Step7.发布文章 概要 1.首先，你需要了解markdown语法，如果不了解可以百度Markdown 2.主题默认文章Hello World，但不同的Hexo主题md文件格式不一样 3.可以下载编辑器，推荐Typora，界面简洁，方便。 1.编写博客 首先我们看看在安装hexo默认主题landscape的默认文章 （在博客根目录下的 \\source\\_posts 下 ） 如果没有下载编辑器，我们只需在_posts 下新建一个Hello World2.md文件，把文档前面的一部分copy来： --- title: Hello World --- title就是文章的标题，然后我们写一个Hello World2（可自行修改），并且写一点内容： --- title: Hello World2 --- ### 你好 这是我的第一篇博客 2.上传到github 然后在根目录下鼠标右击点git bash在窗口中依次输入： hexo clean hexo g hexo d 完成后就可以看到我们的文章了。 注：如果以后有新的博文上传到github上的博客，请依次执行hexo clean ，hexo g 和hexo d操作。 #8.Hexo常用命令这些是常用的命令，希望对大家有所帮助。 hexo clean //清除缓存 hexo g //生成新数据 hexo d //部署 hexo s //启动本地服务预览 npm install hexo -g //安装Hexo npm update hexo -g //升级 hexo init #初始化博客 hexo server -p 5000 #更改端口 教程完","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"小网站分享","slug":"自学网","date":"2020-03-24T14:16:01.000Z","updated":"2020-04-03T01:39:18.800Z","comments":true,"path":"2020/03/24/自学网/","link":"","permalink":"http://www.tpjun.top/2020/03/24/自学网/","excerpt":"","text":"#前言个人收集的一些小网站，希望可以帮助大家在未来学习中解决问题，有用的请记得收藏哦！^-^ 1.我要自学网我要自学网是由来自电脑培训学校和职业高校的老师联手创立的一个视频教学网，网站里的视频教程均由经验丰富的在职老师原创录制，里面内容包含有程序设计，网页设计，工业自动，机械设计，影视动画….有很多，对于学计算机的是必不可少的网站。 2.Grammar Check Online这是一款在线英语语法学习网，主要功能就是对语法的检查，还有文章供你阅读，在你书写英语作文时，这个网站会自动帮你检查，指出语法错误，并且会有相关建议，希望能帮助大家英语学习。还有一些功能还在挖掘中。 3.花瓣这里会有很多图片，可以供大家观赏，并收集。“花瓣网”帮你收集、发现网络上你喜欢的事物。用户可以将网上看见的一切信息都保存下来，简单上手，玩味无限。通过专属于“花瓣网”的浏览器插件——“采集到花瓣”快速完成信息的收集。“花瓣网”帮你收集、发现网络上你喜欢的事物。用户可以将网上看见的一切信息都保存下来，简单上手，玩味无限。通过专属于“花瓣网”的浏览器插件——“采集到花瓣”快速完成信息的收集。 4.[百度脑图](https://naotu.baidu.com/home “百度脑图”在线画思维导图的，觉得这个还算不错，便捷的脑图编辑工具，让你在线上直接创建、保存并分享你的思路。免安装 云存储 易分享 体验舒适 功能丰富","categories":[{"name":"资源","slug":"资源","permalink":"http://www.tpjun.top/categories/资源/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"资源","slug":"资源","permalink":"http://www.tpjun.top/categories/资源/"}]},{"title":"就那样吧","slug":"就那样吧","date":"2020-03-23T08:07:00.000Z","updated":"2020-03-23T08:26:18.162Z","comments":true,"path":"2020/03/23/就那样吧/","link":"","permalink":"http://www.tpjun.top/2020/03/23/就那样吧/","excerpt":"","text":"给自己一个忠告 认识你的人，了解你的人，越少越好。能沉默，就不要说话。能抓住的绳，别放手。不要去接触不适合自己的人脉，不要去沾染不该沾染的人。所谓的知己，一两就足够。沉住气，别去巴结谁。别人的进步，别人的成功，别人的奇迹，与你无关。得不到的不要去追，能忘掉的不要去想，能让自己生气的东西，永远别去搭理….. 就这样吧！","categories":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"随笔","slug":"随笔","permalink":"http://www.tpjun.top/categories/随笔/"}]},{"title":"PicGo-jsDelivr-GitHub搭建免费cdn图床","slug":"PicGo-jsDelivr-GitHub","date":"2020-03-19T14:16:01.000Z","updated":"2020-03-30T02:40:54.094Z","comments":true,"path":"2020/03/19/PicGo-jsDelivr-GitHub/","link":"","permalink":"http://www.tpjun.top/2020/03/19/PicGo-jsDelivr-GitHub/","excerpt":"","text":"前言CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术 #简绍该过程有两部分组成第一部分是先搭建jsDelivr-Github，这个过程当然也可以上传图片，但每次上传图片，还要创建新的版本太麻烦了，具体操作看第一部分步骤，第二部分（PicGo-jsDelivr-GitHub）是在第一部分的基础上加了PinGo，通过PinGo上传图片或者复制外链就比较轻松。 #第一部分（jsDelivr-Github）1.首先创建一个Github 由于我创建过了名为CDN的仓库，在这里以CND代替。 注意：仓库名不能重复创建 2.克隆Github仓库到本地去Github仓库，复制仓库的ssh地址。在你本地博客目录中，执行以下命令： | git clone 复制的仓库ssh地址 3.文件上传到Github仓库在你的本地博客目录里你会发现出现了新的名为CDN的文件夹，然后在CDN文件夹中鼠标右击点击Git Bash Here,执行一下命令： | git status //查看状态 | git add . //添加所有文件到暂存区 不要忘记后面那个. | git commit -m &#39;提交信息&#39; //把文件提交到仓库（这个提交信息可以写你第几次提交） | git push //推送至远程仓库 4.发布版本 这样就可以使用了，但每次有新图片上传时，要更新就是发布新版本，更新时就直接使用3,4步就行（第四步的版本号要进行修改）。 由于上面是jsDelivr-Github方法每次更新，太过烦琐，下面是加上PinGo更快速的方法 #第二部分（PicGo-jsDelivr-GitHub） 在第一部分的基础上进行 1.先下载PinGoPinGo下载地址：https://github.com/Molunerfinn/picgo/releases 2.生成token 复制生成的token，（注意勿要关闭网页这个token将不再出现）。 3.配置PinGo设定自定义域名： | https://cdn.jsdelivr.net/gh/CCIT18101030214/CDN/ | https://cdn.jsdelivr.net/gh/用户名/仓库名/ 配置完就可以使用了。但要注意图床是任何人都能看到的，不要上传私密照片。","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]},{"title":"Hello-World","slug":"hexo-world","date":"2020-03-19T14:16:01.000Z","updated":"2020-03-30T02:35:30.107Z","comments":true,"path":"2020/03/19/hexo-world/","link":"","permalink":"http://www.tpjun.top/2020/03/19/hexo-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://www.tpjun.top/tags/悦读/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://www.tpjun.top/categories/技术/"}]}]}